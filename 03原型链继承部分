<!DOCTYPE html>
<html>
<head lang="en">
    <meta charset="UTF-8">
    <title>Lbx-TsTxWwdz</title>
    <!--If(good code){Writer is SexBear-Lbx;}else{I don’t know who is writer;}-->
    <!--原型链
            万物生于无 而归于无。原型链最后也是无
            a -> A.prototype -> Object.prototype -> null
            1.默认原型的原型对象是Object.prototype
            2.Object.prototype的原型是null
            3.概念：从对象到Object.prototype之前存在一条层次分明，逐级递进的链式结果。这个结构叫做对象的原型链
    -->
    <!--对象的属性搜索原则
            当对象去访问某个属性时，首先在本身上查找，如果有就返回值，并停止。
            如果没有，就去其原型对象上查找，找到就返回该值，并停止。
            如果没有，就继续向原型的原型对象查找。直到Object.prototype
            如果有就返回该值 没有就返回undefined
            当访问一个对象不存在的属性时，会检索整个对象的原型链。会降低js性能
    -->
    <!--绘制对象的原型链

    -->
    <!--继承
            1.继承是对象与对象之间的关系
            2.继承就是指一个对象有权去访问另一个对象的成员
            3.继承的方式：只要能实现一个对象 有权访问另一个对象成员 的方式都可以称为实现继承的方式
    -->
    <!--继承的实现方式
            1.基于原型的实现方式（原型式）
                扩展原有的原型
                替换原型
            2.混入式
                将要被继承的对象成员拷贝一份 添加到继承对象
            3.对象冒充
    -->
    <!--Object.prototype方法
            1.hasOwnProperty
                obj.hasOwnProperty('propertyName');
                判断obj对象本身是否有propertyName属性，返回值为bool值，如果本身含有该属性，返回true。
            2.in运算符
                'propertyName' in 对象;
                判断对象是否含有指定的属性 propertyName，如果含有返回true
                运算符右边的操作数类型必须为对象
            3.isPrototypeOf
                对象a.isPrototypeOf(对象b)
                判断a是否为b的原型对象，如果是返回true
            4.propertyIsEnumerable
                对象.propertyIsEnumerable('propertyName');
                hasOwnProperty的加强版，返回bool值，满足两个条件返回true，该属性的propertyName必须是对象 本身具有的，该属性必须是可枚举(可遍历的)的(可以通过for in 遍历出来的属性)
            5.instanceof
                对象a instanceof 构造函数A
                判断对象a是否为构造函数A的实例，如果是返回true
                在对象a的原型链上是否出现A.pertotype这个对象，如果出现那么a就是A的实例，否则就不是。
                该运算符右边的操作数必须为函数
    -->
    <!--构造函数的执行顺序
            如果在构造函数内部 显示 定义了 return语句，此时如果返回值的类型是基本数据类型或者空类型，会被忽略掉。而返回值为对象类型时，并不会忽略。
        1.创建了一个空对象obj
        2.将构造函数内部的this指向 上述空对象obj
        3.开始执行构造函数内部的代码
        4.返回this
    -->
    <!--函数的原型链
            创建函数的方式：声明式 表达式 构造函数方式Function
            函数对象：把函数当做对象 叫做函数对象
            普通对象：除了函数对象以外的 全部为普通对象
    -->
</head>
<body>

<script>
    function fff(){
        this.name='fff';
    }
    var a=new fff();
    function child(){
        this.age=38;
    }
    var b=new child();
//    var a={name:'ls'};
//    var b={age:18};

    b.extend=function(){
        var k,i= 0,l=arguments.length,obj;
        for(;i<l;i++){
            obj=arguments[i];
            for(k in obj){
                this[k]=obj[k];
            }
        }
    }
    var r = b.extend(a);
    console.log(b);
    console.log(r);
</script>
</body>
</html>
