<!DOCTYPE html>
<html>
<head lang="en">
    <meta charset="UTF-8">
    <title>Lbx-TsTxWwdz</title>
    <!--If(good code){Writer is SexBear-Lbx;}else{I don’t know who is writer;}-->
    <!--实例成员与静态成员
            1.实例成员：普通对象本身的属性和方法 以及原型对象上属性和方法。统称为实例成员
               特点：需要通过对象 去访问这些成员
            2.静态成员：函数对象上的属性和方法。统称为静态成员
               特点：不需要通过创建对象，直接通过函数名字就可以访问这些属性
            3.在实际开发时，将工具类成员 添加到某个函数上 编程静态成员方便使用
    -->
    <!--arguments对象简介
            1.arguments的作用：存储实参
            2.arguments的属性
                length：存储实参的个数 对比函数lenght->函数定义形参个数
                callee：返回正被调用的函数 （匿名递归函数调用）
            3.函数相关属性
                caller：返回调用函数的 函数
                length：存储的是该函数定义的形参个数
                name：存储的是函数的名字
    -->
    <!--eval函数
            1.可以将一段字符串当js代码来执行。
            2.应用场景：发送ajax请求时，从后台得到json字符串数据，然后使用该方法将其转换成json对象
            3.通过Function也可以将一段字符串当做js代码来执行  (new Function(str)());
            4.eval 和 new Function 区别在于 eval在执行时 可能会创建全局变量，从而造成变量污染，而后者会在生成的函数内部创建变量，并不会出现上述问题。
    -->
    <!--词法作用域
            1.概念：一种静态作用域。不会再 js代码执行时，动态的去解析每个变量的作用域，因为在使用某个变量时 其作用域已经确定了。词法作用域规定：变量的作用域是由变量定义的位置决定的而不是由其使用位置决定。只有函数可以限定作用域。let块级作用域 const常量
            2.作用域种类：
                全局作用域：在整个script标签内 为全局作用域
                局部作用域：在函数体内部的作用域 为局部作用域
            3.变量的种类
                全局变量：不在任何函数内部定义的变量
                局部变量：定义在函数内部的变量
    -->
    <!--js预解析
            1.词法分析：分析你所写的代码是否能正确执行，如果不能被正确执行，会在此阶段抛出异常(报错)
            2.函数名以及变量名提升：把所有var声明的变量 提升到 当前作用域的最顶端，把function声明的函数以及实现部分 一并提升到当前作用域顶端
            3.确定变量的作用域
            4.活动对象 存储函数内部定义的数据，再函数执行时 会创建一个对象，通常该对象被称为活动对象 存贮所有函数再执行时 所需的变量
    -->
    <!--作用域链
            1.将整个script标签定义0级链。把全局作用域绘制在该链上
            2.如果遇到函数 就在此链基础上扩展新链。级别为当前链级别+1在绘制新链的数据
            3.重复第二步直到没有遇到函数
    -->
    <!--变量的搜索原则
            1.首先在当前作用域链上所有，如果找到就返回该变量值 并停止搜索
            2.如果没有找到，就想上一级作用域链搜索，如果找到就返回该变量值 并停止搜索
            3.如果没有找到，就继续向上一级作用域链查找，直到0级链
            4.如果找到，就返回变量值，否则报错
    -->

</head>
<body>
<script>
//    小递归
//    1 3 5 7 9 11
//    function dc(n){
//        if(n<0){
//            return undefined;
//        }else if(n == 1){
//            return 1;
//        }else{
//            return dc(n-1)+2;
//        }
//    }


    aaa=5;
    function ff(){
        aaa=10;
        console.log(aaa);
    }
    var aaa=15;
    var aaa=20;

</script>
</body>
</html>
