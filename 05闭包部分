<!DOCTYPE html>
<html>
<head lang="en">
    <meta charset="UTF-8">
    <title>Lbx-TsTxWwdz</title>
    <!--If(good code){Writer is SexBear-Lbx;}else{I don’t know who is writer;}-->
    <!--闭包
            1.概念：就是指 可以访问其他函数内部数据的 函数
            2.作用：能够实现在函数外部 访问函数内部的数据
            3.特点：闭包可以 缓存数据
            4.在什么情况下，会产生闭包？
                如果外层函数执行一次，就会创建一个闭包。在不同闭包之间所缓存的数据无法共享，也就是说闭包只能获取自己缓存的数据 无法获取其他闭包缓存的数据。
            5.缺点：由于闭包可以缓存数据，因此使用不当会造成内存开销增大 进而导致内存泄露。
    -->
    <!--垃圾回收机制：js中有一个对象GC，他会周期性的寻访每个变量，如果变量生命周期结束（过了生命周期），那么这些变量就变成了“垃圾”，其所占用内存会被释放掉。
            以下是如何判定生命周期的方法：
            1.引用计数法
                当定义一个变量时，此时该变量的计数为0；如果 有其他数据对该变量有使用的话，其计数+1；如果对该变量有使用的数据，被释放掉了，此时引用计数-1。
                GC在寻访到变量时，如果其引用计数为0，就释放其占用的空间。
            2.标记清除法
                引用计数法：有一个缺点就是会产生循环引用。
                GC对象会尝试着从文档根节点（window）出发 至少找到一条路径能够到达该变量。
                如果找到了这样一条路径，此时会将该变量标记为“不可清除”；
                相反如果没有找到 就将该变量 标记为“可以清除”。
            3.以上两种机制对比
                引用计数法性能高一些 但是会循环引用 无法释放一些变量
                标记清除法性能略低 但是不会循环引用
                在当代浏览器会组合使用两种机制 优先使用引用计数法，再使用标记清除法，释放一些 使用引用计数无法释放的变量。
    -->
    <!--闭包的应用场景
        1.保护数据 数据类型
        2.缓存数据 fib 打印li
        3.私有变量
        4.沙箱模式
            如果将代码都写在全局上的话，就会造成变量污染以及全局对象的污染。
            特点：隔离作用域（防止全局变量污染），代码自执行
            沙箱模式：就是一个自执行的匿名函数，通常将常用的全局变量或对象，当做实参传入到沙箱内部
            好处：提高js性能 利用代码压缩（框架 组件 插件）
-->
</head>
<body>
<script>
//    function fff(){
//        var num=Math.random();
//        var obj={name:'lbx'};
//        function ff(){
//            return {
//                num:num,
//                obj:obj
//            };
//        }
//        return ff();
//    }
//    var o=fff();
//    console.log(o.num);
//    console.log(o.obj);

//    function fun(n, o) {
//        console.log(o);
//        return {
//            fun: function(m) {
//                return fun(m, n);
//            }
//        };
//    }
//    // 闭包a中，存储n的值为0
//    var a = fun(0); // undefined
//    a.fun(1); // 0
//    a.fun(2); // 0
//    a.fun(3); // 0
//
//    var b = fun(0).fun(1).fun(2).fun(3);
//    // undefinded 0 1 2
//
//    var c = fun(0).fun(1); // undefined 0
//    c.fun(2); // 1
//    c.fun(3); // 1

    function fun(n, o) {1
        console.log(o); //undefined
        return {
            fun: function(m) {
                return fun(m, n);1 1
            }
        };
    }
    //闭包n=0
    var a = fun(0); //undefined
    a.fun(1); //0
    a.fun(2); //0
    a.fun(3); //0

    var b = fun(0).fun(1).fun(2).fun(3);
    //undefined 0 1 2

    var c = fun(0).fun(1); //undefined 0
    c.fun(2); //1
    c.fun(3); //1

</script>
</body>
</html>
