<!DOCTYPE html>
<html>
<head lang="en">
    <meta charset="UTF-8">
    <title>Lbx-TsTxWwdz</title>
    <!--If(good code){Writer is SexBear-Lbx;}else{I don’t know who is writer;}-->
    <!--JS中的几个主线程
            1.页面渲染主线程：负责页面渲染，解析标签等。
            2.JS代码执行主线程：从上到下 一步一步 的执行，每一条语句必须有返回值，才会继续向下执行。
            3.事件循环主线程：实现和用户交互。
    -->
    <!--异步任务队列
            再js代码中调用了异步的方法 那么不会立即执行该方法 而是将其放置在 异步任务队列中。然后等待js主线程代码执行完毕，再分配资源来执行异步任务。
            优先保证主线程代码执行，在去分配资源（内存、cpu）给异步任务。
    -->
    <!--函数四种调用模式
            目的：确定函数内部this的指向。
            1.普通函数执行模式
                this -> window
            2.方法调用模式
                this -> 方法的调用
            3.构造函数模式
                this -> 当前构造函数创建出来的对象
            4.call/apply模式（上下文模式）
                再js中，不能直接给this赋值，因此要向改变函数内部的this指向的话，就必须通过call/apply
                call/apply是方法，是所有函数都具有的方法。Function.prototype
                只要函数调用call/apply方法，那么该函数就会立即执行。
            5.call方法
                fn.call(thisObj,arg1,arg2,....argN);
                thisObj就是fn改变后的this指向；如果thisObj为null/undefined，此时 this -> window
                arg1,arg2,....argN就是fun在执行时传入的实参
            6.apply方法
                fn.apple(thisObj,[arr])
                thisObj就是fn改变后的this指向；如果thisObj为null/undefined，此时 this -> window
                []:将数组中的元素 当做实参 传给fn
    -->
    <!--上下文模式的应用
            1.动态改变this
            2.借调内置方法
            3.借用构造函数
            4.将伪数组变成真数组
    -->
</head>
<body>
<script>
//    for (var i = 0; i < 3; i++) {
//        setTimeout(console.log(i), (function() {
//            var b = i * 1000;//0 1000 2000
//            console.log(b);//2000
//            return b;
//        })());
//    }

//    var name='global';
//    var obj={
//        name:'obj',
//        dose:function(){
//            this.name='dose';
//            return function(){
//                return this.name;
//            }
//        }
//    };
////    console.log(obj.dose().call(this));
//    console.log(obj.dose().call());

    var getName;
    function Foo() {
        getName = function() {
            alert(1);
        };
        return this;
    }

    function getName() {
        alert(5);
    }

    Foo.getName = function() {
        alert(2);
    };
    Foo.prototype.getName = function() {
        alert(3);
    };
    getName = function() {
        alert(4);
    };
</script>
</body>
</html>
